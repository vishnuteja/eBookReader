package shelf;


import com.itextpdf.text.Document;
import com.itextpdf.text.DocumentException;
import com.itextpdf.text.PageSize;
import com.itextpdf.text.Paragraph;
import com.itextpdf.text.pdf.PdfReader;
import com.itextpdf.text.pdf.PdfWriter;
import com.itextpdf.text.pdf.parser.PdfTextExtractor;
import java.io.File;
import java.io.FileInputStream;
import java.io.FileNotFoundException;
import java.io.FileOutputStream;
import java.io.FileReader;
import java.io.FileWriter;
import java.io.IOException;
import java.io.ObjectInputStream;
import java.io.ObjectOutputStream;
import java.io.PrintStream;
import java.nio.channels.FileChannel;
import java.util.HashMap;
import java.util.Iterator;
import java.util.logging.Level;
import java.util.logging.Logger;
import javax.swing.JFileChooser;
import javax.swing.JOptionPane;


/*
 * To change this template, choose Tools | Templates
 * and open the template in the editor.
 */

/*
 * shelf.java
 *
 * Created on Jan 5, 2012, 11:03:58 AM
 */
/**
 *
 * @author 1211A051-PC
 */
public class shelf extends javax.swing.JFrame {

    /** Creates new form shelf */
    HashMap<String,String> hm;
    int noofrows=0,noofrows2=0,columnno=0,pageno=1;
    public shelf() {
        initComponents();
        try
	  {
		  String strDirectoy =".\\store"; //Name of the folder to be created
		  
		  boolean success = (new File(strDirectoy)).mkdir();
		 
		  if (success) 
			  System.out.println("Directory: "+ strDirectoy + " created");
		  else
			  System.out.println("Folder Already exists");
                  
                  hm=new HashMap<String,String>();
                  ObjectInputStream obj = new ObjectInputStream(new FileInputStream(".\\store\\db.txt"));
            hm = (HashMap<String,String>)obj.readObject();
            //========================
            book bk=new book();
            bk.table();
            //========================
	  }
	  
	  catch (Exception e)
	  {
	   System.err.println("Error: " + e.getMessage());
	  }
    }

    /** This method is called from within the constructor to
     * initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is
     * always regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jScrollPane1 = new javax.swing.JScrollPane();
        ta = new javax.swing.JTextArea();
        jtf = new javax.swing.JTextField();
        jButton6 = new javax.swing.JButton();
        jButton7 = new javax.swing.JButton();
        jButton8 = new javax.swing.JButton();
        jtf1 = new javax.swing.JTextField();
        jScrollPane2 = new javax.swing.JScrollPane();
        jTable1 = new javax.swing.JTable();
        jButton1 = new javax.swing.JButton();
        jButton2 = new javax.swing.JButton();
        jButton3 = new javax.swing.JButton();
        jScrollPane3 = new javax.swing.JScrollPane();
        jTable2 = new javax.swing.JTable();
        jmb1 = new javax.swing.JMenuBar();
        jm1 = new javax.swing.JMenu();
        open = new javax.swing.JMenuItem();
        addbook = new javax.swing.JMenuItem();
        delbook = new javax.swing.JMenuItem();
        exit = new javax.swing.JMenuItem();
        jm2 = new javax.swing.JMenu();
        listmi = new javax.swing.JMenuItem();
        gridmi = new javax.swing.JMenuItem();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);
        setBackground(new java.awt.Color(255, 51, 204));
        setCursor(new java.awt.Cursor(java.awt.Cursor.HAND_CURSOR));

        ta.setColumns(20);
        ta.setEditable(false);
        ta.setRows(5);
        jScrollPane1.setViewportView(ta);

        jtf.setText("search field");
        jtf.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                jtfMouseClicked(evt);
            }
        });
        jtf.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jtfActionPerformed(evt);
            }
        });

        jButton6.setText("Ok");
        jButton6.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton6ActionPerformed(evt);
            }
        });

        jButton7.setIcon(new javax.swing.ImageIcon(getClass().getResource("/shelf/up.jpg"))); // NOI18N
        jButton7.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton7ActionPerformed(evt);
            }
        });

        jButton8.setIcon(new javax.swing.ImageIcon(getClass().getResource("/shelf/down.jpg"))); // NOI18N
        jButton8.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton8ActionPerformed(evt);
            }
        });

        jtf1.setText("1");
        jtf1.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                jtf1MouseClicked(evt);
            }
            public void mouseReleased(java.awt.event.MouseEvent evt) {
                jtf1MouseReleased(evt);
            }
        });
        jtf1.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jtf1ActionPerformed(evt);
            }
        });
        jtf1.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyTyped(java.awt.event.KeyEvent evt) {
                jtf1KeyTyped(evt);
            }
        });

        jTable1.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {
                {null, null},
                {null, null},
                {null, null},
                {null, null},
                {null, null},
                {null, null},
                {null, null},
                {null, null},
                {null, null},
                {null, null},
                {null, null},
                {null, null},
                {null, null},
                {null, null},
                {null, null},
                {null, null},
                {null, null},
                {null, null},
                {null, null},
                {null, null},
                {null, null},
                {null, null},
                {null, null},
                {null, null},
                {null, null},
                {null, null},
                {null, null},
                {null, null},
                {null, null},
                {null, null},
                {null, null},
                {null, null},
                {null, null},
                {null, null},
                {null, null},
                {null, null},
                {null, null},
                {null, null},
                {null, null},
                {null, null},
                {null, null},
                {null, null},
                {null, null},
                {null, null},
                {null, null},
                {null, null},
                {null, null},
                {null, null},
                {null, null},
                {null, null}
            },
            new String [] {
                "Title", "Author"
            }
        ));
        jTable1.setRequestFocusEnabled(false);
        jTable1.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                jTable1MouseClicked(evt);
            }
        });
        jScrollPane2.setViewportView(jTable1);

        jButton1.setText("go");
        jButton1.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton1ActionPerformed(evt);
            }
        });

        jButton2.setIcon(new javax.swing.ImageIcon(getClass().getResource("/shelf/END.png"))); // NOI18N
        jButton2.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton2ActionPerformed(evt);
            }
        });

        jButton3.setIcon(new javax.swing.ImageIcon(getClass().getResource("/shelf/FRONT.png"))); // NOI18N
        jButton3.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton3ActionPerformed(evt);
            }
        });

        jTable2.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {
                {null, null, null},
                {null, null, null},
                {null, null, null},
                {null, null, null},
                {null, null, null},
                {null, null, null},
                {null, null, null},
                {null, null, null},
                {null, null, null},
                {null, null, null},
                {null, null, null},
                {null, null, null},
                {null, null, null},
                {null, null, null}
            },
            new String [] {
                "Title 1", "Title 2", "Title 3"
            }
        ));
        jTable2.setColumnSelectionAllowed(true);
        jTable2.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                jTable2MouseClicked(evt);
            }
        });
        jScrollPane3.setViewportView(jTable2);
        jTable2.getColumnModel().getSelectionModel().setSelectionMode(javax.swing.ListSelectionModel.SINGLE_SELECTION);

        jm1.setText("File");
        jm1.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jm1ActionPerformed(evt);
            }
        });

        open.setText("Open");
        open.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                openActionPerformed(evt);
            }
        });
        jm1.add(open);

        addbook.setText("+ add Book");
        addbook.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                addbookActionPerformed(evt);
            }
        });
        jm1.add(addbook);

        delbook.setText("- delete Book");
        delbook.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                delbookActionPerformed(evt);
            }
        });
        jm1.add(delbook);

        exit.setText("Exit");
        exit.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                exitActionPerformed(evt);
            }
        });
        jm1.add(exit);

        jmb1.add(jm1);

        jm2.setText("View");

        listmi.setText("= List View");
        listmi.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                listmiActionPerformed(evt);
            }
        });
        jm2.add(listmi);

        gridmi.setText("# Grid View");
        gridmi.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                gridmiActionPerformed(evt);
            }
        });
        jm2.add(gridmi);

        jmb1.add(jm2);

        setJMenuBar(jmb1);

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jScrollPane3, javax.swing.GroupLayout.DEFAULT_SIZE, 469, Short.MAX_VALUE)
                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                        .addComponent(jButton3, javax.swing.GroupLayout.PREFERRED_SIZE, 73, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(36, 36, 36)
                        .addComponent(jButton2, javax.swing.GroupLayout.PREFERRED_SIZE, 70, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(14, 14, 14))
                    .addComponent(jScrollPane2))
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addGap(72, 72, 72)
                        .addComponent(jButton7, javax.swing.GroupLayout.PREFERRED_SIZE, 27, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addComponent(jButton8, javax.swing.GroupLayout.PREFERRED_SIZE, 28, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(18, 18, 18)
                        .addComponent(jtf1, javax.swing.GroupLayout.PREFERRED_SIZE, 51, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(18, 18, 18)
                        .addComponent(jButton1)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 143, Short.MAX_VALUE)
                        .addComponent(jtf, javax.swing.GroupLayout.PREFERRED_SIZE, 152, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(jButton6, javax.swing.GroupLayout.PREFERRED_SIZE, 55, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(12, 12, 12))
                    .addGroup(layout.createSequentialGroup()
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addComponent(jScrollPane1, javax.swing.GroupLayout.DEFAULT_SIZE, 627, Short.MAX_VALUE))))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                .addGap(13, 13, 13)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                    .addGroup(javax.swing.GroupLayout.Alignment.LEADING, layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                        .addComponent(jtf, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addComponent(jButton6, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                    .addGroup(layout.createSequentialGroup()
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                            .addComponent(jButton8, 0, 0, Short.MAX_VALUE)
                            .addComponent(jButton7, javax.swing.GroupLayout.PREFERRED_SIZE, 28, Short.MAX_VALUE)
                            .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                                .addComponent(jtf1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addComponent(jButton1))
                            .addComponent(jButton2, javax.swing.GroupLayout.DEFAULT_SIZE, 28, Short.MAX_VALUE)
                            .addComponent(jButton3))
                        .addGap(9, 9, 9)))
                .addGap(13, 13, 13)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addComponent(jScrollPane2, javax.swing.GroupLayout.PREFERRED_SIZE, 200, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(jScrollPane3, javax.swing.GroupLayout.DEFAULT_SIZE, 223, Short.MAX_VALUE))
                    .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 429, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addContainerGap())
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

private void jtfActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jtfActionPerformed
// TODO add your handling code here:
    
}//GEN-LAST:event_jtfActionPerformed

private void jButton6ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton6ActionPerformed
// TODO add your handling code here:
   // System.out.println("insesrting all keys into table from the HashMap");        
        Iterator iterator = hm.keySet().iterator();
       String st=null,search=null;
       search=jtf.getText();
       int cou1=0,cou2=0;
   // jTable1.setValueAt("hii", 1, 1);
       for(int i=0;i<noofrows;i++)
       {
           jTable1.setValueAt("",i,0);
           jTable1.setValueAt("",i,1);
       }
        while(iterator. hasNext()){        
            //System.out.println(iterator.next());
            //System.out.println();
            st=iterator.next().toString();
           // ta.append(st+"\t\t\t"+hm.get(st)+"\n");
           // jTable1.setValueAt("",cou1,cou2);
            if(st.contains(search)||st.contains(search.toUpperCase())||st.contains(search.toLowerCase())||st.toLowerCase().contains(search)||st.toUpperCase().contains(search))
            {
            jTable1.setValueAt(st, cou1, cou2);
            cou2++;
            jTable1.setValueAt(hm.get(st), cou1, cou2);
            cou1++;
            cou2=0;
            }
        }
        noofrows=cou1;
    
}//GEN-LAST:event_jButton6ActionPerformed

private void jtfMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_jtfMouseClicked
// TODO add your handling code here:
    jtf.setText("");
}//GEN-LAST:event_jtfMouseClicked

private void exitActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_exitActionPerformed
// TODO add your handling code here:
    System.exit(0);
}//GEN-LAST:event_exitActionPerformed

private void addbookActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_addbookActionPerformed
// TODO add your handling code here:
    bookshelf bs=new bookshelf();
    bs.addBook();
}//GEN-LAST:event_addbookActionPerformed

private void delbookActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_delbookActionPerformed
// TODO add your handling code here:
    bookshelf bs=new bookshelf();
    bs.delBook();    
   // jTable1.setValueAt("",0,0);
    //jTable1.setValueAt("",0,1);
    book bk=new book();
    bk.table();
}//GEN-LAST:event_delbookActionPerformed

private void listmiActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_listmiActionPerformed
// TODO add your handling code here:
/*    ta.setText(""+"\t\t Title \t\t"+"\t\t\t Author \t\t\n");
   ta.append("\n---------------------------------------------------------------------------------------------------------------------------------------------------------------------------\n");
   
    System.out.println(hm);
    //ta.append(hm.toString());
    System.out.println("Retrieving all keys from the HashMap");        
        Iterator iterator = hm.keySet().iterator();
       String st=null;
        while(iterator. hasNext()){        
            //System.out.println(iterator.next());
            //System.out.println();
            st=iterator.next().toString();
            ta.append(st+"\t\t\t"+hm.get(st)+"\n");
           // ta.append();
         //   ta.append(hm.get(st));
            
        }
    */
    book bk=new book();
            bk.table();
}//GEN-LAST:event_listmiActionPerformed

private void gridmiActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_gridmiActionPerformed
// TODO add your handling code here:
   // System.out.println("insesrting all keys into table from the HashMap");        
        Iterator iterator = hm.keySet().iterator();
       String st=null;
       int cou1=0,cou2=0,cou3=0;
   // jTable1.setValueAt("hii", 1, 1);
       for(int i=0;i<noofrows;i++)
       {
           jTable1.setValueAt("",i,0);
           jTable1.setValueAt("",i,1);
       }
       for(int i=0;i<14;i++)
       {
           jTable2.setValueAt("",i,0);
           jTable2.setValueAt("",i,1);
           jTable2.setValueAt("",i,2);
           
       }
        while(iterator. hasNext()){        
            //System.out.println(iterator.next());
            //System.out.println();
            st=iterator.next().toString();
           // ta.append(st+"\t\t\t"+hm.get(st)+"\n");
           // jTable1.setValueAt("",cou1,cou2);
            jTable2.setValueAt(st, cou1, cou2);
            cou2++;
            if(cou2==2)
            {
                cou2=0;
                cou1++;
            }
                
            
        }
        noofrows2=cou1;
}//GEN-LAST:event_gridmiActionPerformed

private void openActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_openActionPerformed
// TODO add your handling code here:
    reader rd=new reader();
    rd.readBook();
    
}//GEN-LAST:event_openActionPerformed

private void jTable1MouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_jTable1MouseClicked
// TODO add your handling code here:
    jtf1.setText("1");
    pageno=1;
    int num1=jTable1.getSelectedRow();
    PdfReader pdfr=null; 
        String str3=null,str1=jTable1.getValueAt(num1, 0).toString();
    //System.out.println(num1);
  /*  System.out.println("tableee nameee"+jTable1.getValueAt(num1, 0));
    try {
        File fil=new File(".//store//"+jTable1.getValueAt(num1, 0).toString());        
        pdfr=new PdfReader(fil.toString());
            
                str3=PdfTextExtractor.getTextFromPage(pdfr, 22);
        }
            catch (IOException ex) {
                Logger.getLogger(shelf.class.getName()).log(Level.SEVERE, null, ex);
            }
            ta.setText(str3);
            
    */        
            
            try
        {
            
           
            File dir =  new File(".\\store");
            File[] file =  dir.listFiles();
            String files;
            System.out.println("length : "+file.length);
            for(int i=0;i<file.length;i++)
            {
                files = file[i].getName();
                System.out.println("files are"+files);
                if (files.endsWith(".PDF") || files.endsWith(".pdf"))
                {
                   System.out.println("default"+files);   
                 try
                 {
                  PdfReader ReadInputPDF;
            
                  ReadInputPDF = new PdfReader(".\\store\\"+files);
                  HashMap hMap = new HashMap();
                  hMap=ReadInputPDF.getInfo();
                  Iterator iterator = hMap.keySet().iterator();
                  String athr=null;
                  
                  while (iterator.hasNext())
                  {
                          String key = (String) iterator.next();
                          
                          if(key.equals("Title"))
                          {
                          System.out.println(key + ":" + hMap.get(key));
                          if(hMap.get(key).equals(str1))
                          {
                              try {
        File fil=new File(file[i].toString());        
        pdfr=new PdfReader(fil.toString());
            
                str3=PdfTextExtractor.getTextFromPage(pdfr,1);
        }
            catch (IOException ex) {
                Logger.getLogger(shelf.class.getName()).log(Level.SEVERE, null, ex);
            }
            ta.setText(str3);
                          }
                         // ta.append(hMap.get(key)+"\t"+athr+"\n");
                              //  String put = hm.put(hMap.get(key).toString(), athr);
                          }
                          
                          if(key.equals("Author"))
                          {
                          System.out.println(key + ":" + hMap.get(key));
                            // ta.append(hMap.get(key)+"\n");
                          athr=hMap.get(key).toString();
                          }                 
          }
                //  hMap.clear();
                  
       }
         
        catch (Exception ae)
        {
            System.out.println(ae);
         
        }
                   
                   
                }
            }
        }

        catch(Exception e)
        {
			System.out.println(e.getMessage());
        }
            
            
}//GEN-LAST:event_jTable1MouseClicked

private void jtf1ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jtf1ActionPerformed
// TODO add your handling code here:
}//GEN-LAST:event_jtf1ActionPerformed

private void jButton8ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton8ActionPerformed
// TODO add your handling code here:
    pageno++;
    int num1=jTable1.getSelectedRow();
   if(jTable2.getValueAt(0,0).equals(""))
   {
    PdfReader pdfr=null; 
        String str3=null,str1=jTable1.getValueAt(num1, 0).toString();
    
            jd1=new javax.swing.JDialog();
            try
        {
            
           
            File dir =  new File(".\\store");
            File[] file =  dir.listFiles();
            String files;
            System.out.println("length : "+file.length);
            for(int i=0;i<file.length;i++)
            {
                files = file[i].getName();
                System.out.println("files are"+files);
                if (files.endsWith(".PDF") || files.endsWith(".pdf"))
                {
                   System.out.println("default"+files);   
                 try
                 {
                  PdfReader ReadInputPDF;
            
                  ReadInputPDF = new PdfReader(".\\store\\"+files);
                  HashMap hMap = new HashMap();
                  hMap=ReadInputPDF.getInfo();
                  Iterator iterator = hMap.keySet().iterator();
                  String athr=null;
                  
                  while (iterator.hasNext())
                  {
                          String key = (String) iterator.next();
                          
                          if(key.equals("Title"))
                          {
                          System.out.println(key + ":" + hMap.get(key));
                          if(hMap.get(key).equals(str1))
                          {
                              try {
        File fil=new File(file[i].toString());        
        pdfr=new PdfReader(fil.toString());
            
                str3=PdfTextExtractor.getTextFromPage(pdfr,pageno);
        }
            catch (IOException ex) {
                Logger.getLogger(shelf.class.getName()).log(Level.SEVERE, null, ex);
            }
            ta.setText(str3);
                          }
                         // ta.append(hMap.get(key)+"\t"+athr+"\n");
                              //  String put = hm.put(hMap.get(key).toString(), athr);
                          }
                          
                          if(key.equals("Author"))
                          {
                          System.out.println(key + ":" + hMap.get(key));
                            // ta.append(hMap.get(key)+"\n");
                          athr=hMap.get(key).toString();
                          }                 
          }
                //  hMap.clear();
                  
       }
         
        catch (Exception ae)
        {
            System.out.println(ae);
            //System.out.println(e.getMessage());
                        JOptionPane.showMessageDialog(jd1,"page limit reached");
                        pageno--;
                        jtf1.setText(""+pageno);
         
        }
                   
                   
                }
            }
        }

        catch(Exception e)
        {
			System.out.println(e.getMessage());
                        JOptionPane.showMessageDialog(jd1,"page limit reached");
                        pageno--;
                        jtf1.setText(""+pageno);
        }
   }
   else if(jTable1.getValueAt(0,0).equals(""))
   {
   
       int numb1=jTable2.getSelectedRow();
    int numb2=jTable2.getSelectedColumn();
    PdfReader pdfr=null; 
        String str3=jTable2.getValueAt(numb1,numb2).toString();
    //System.out.println(num1);
  /*  System.out.println("tableee nameee"+jTable1.getValueAt(num1, 0));
    try {
        File fil=new File(".//store//"+jTable1.getValueAt(num1, 0).toString());        
        pdfr=new PdfReader(fil.toString());
            
                str3=PdfTextExtractor.getTextFromPage(pdfr, 22);
        }
            catch (IOException ex) {
                Logger.getLogger(shelf.class.getName()).log(Level.SEVERE, null, ex);
            }
            ta.setText(str3);
            
    */        
            
            try
        {
            
           
            File dir =  new File(".\\store");
            File[] file =  dir.listFiles();
            String files;
            System.out.println("length : "+file.length);
            for(int i=0;i<file.length;i++)
            {
                files = file[i].getName();
                System.out.println("files are"+files);
                if (files.endsWith(".PDF") || files.endsWith(".pdf"))
                {
                   System.out.println("default"+files);   
                 try
                 {
                  PdfReader ReadInputPDF;
            
                  ReadInputPDF = new PdfReader(".\\store\\"+files);
                  HashMap hMap = new HashMap();
                  hMap=ReadInputPDF.getInfo();
                  Iterator iterator = hMap.keySet().iterator();
                  String athr=null;
                  
                  while (iterator.hasNext())
                  {
                          String key = (String) iterator.next();
                          
                          if(key.equals("Title"))
                          {
                          System.out.println(key + ":" + hMap.get(key));
                          if(hMap.get(key).equals(str3))
                          {
                              try {
        File fil=new File(file[i].toString());        
        pdfr=new PdfReader(fil.toString());
            
                str3=PdfTextExtractor.getTextFromPage(pdfr,pageno);
        }
            catch (IOException ex) {
                Logger.getLogger(shelf.class.getName()).log(Level.SEVERE, null, ex);
            }
            ta.setText(str3);
                          }
                         // ta.append(hMap.get(key)+"\t"+athr+"\n");
                              //  String put = hm.put(hMap.get(key).toString(), athr);
                          }
                          
                          if(key.equals("Author"))
                          {
                          System.out.println(key + ":" + hMap.get(key));
                            // ta.append(hMap.get(key)+"\n");
                          athr=hMap.get(key).toString();
                          }                 
          }
                //  hMap.clear();
                  
       }
         
        catch (Exception ae)
        {
            System.out.println(ae);
         
        }
                   
                   
                }
            }
        }

        catch(Exception e)
        {
			System.out.println(e.getMessage());
        }
   }
            jtf1.setText(""+pageno);
}//GEN-LAST:event_jButton8ActionPerformed

private void jButton7ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton7ActionPerformed
// TODO add your handling code here:
    pageno--;
    int num1=jTable1.getSelectedRow();
    PdfReader pdfr=null; 
        String str3=null,str1=jTable1.getValueAt(num1, 0).toString();
               
            try
        {
            
           
            File dir =  new File(".\\store");
            File[] file =  dir.listFiles();
            String files;
            System.out.println("length : "+file.length);
            for(int i=0;i<file.length;i++)
            {
                files = file[i].getName();
                System.out.println("files are"+files);
                if (files.endsWith(".PDF") || files.endsWith(".pdf"))
                {
                   System.out.println("default"+files);   
                 try
                 {
                  PdfReader ReadInputPDF;
            
                  ReadInputPDF = new PdfReader(".\\store\\"+files);
                  HashMap hMap = new HashMap();
                  hMap=ReadInputPDF.getInfo();
                  Iterator iterator = hMap.keySet().iterator();
                  String athr=null;
                  
                  while (iterator.hasNext())
                  {
                          String key = (String) iterator.next();
                          
                          if(key.equals("Title"))
                          {
                          System.out.println(key + ":" + hMap.get(key));
                          if(hMap.get(key).equals(str1))
                          {
                              try {
        File fil=new File(file[i].toString());        
        pdfr=new PdfReader(fil.toString());
            
                str3=PdfTextExtractor.getTextFromPage(pdfr,pageno);
        }
            catch (IOException ex) {
                Logger.getLogger(shelf.class.getName()).log(Level.SEVERE, null, ex);
            }
            ta.setText(str3);
                          }
                         // ta.append(hMap.get(key)+"\t"+athr+"\n");
                              //  String put = hm.put(hMap.get(key).toString(), athr);
                          }
                          
                          if(key.equals("Author"))
                          {
                          System.out.println(key + ":" + hMap.get(key));
                            // ta.append(hMap.get(key)+"\n");
                          athr=hMap.get(key).toString();
                          }                 
          }
                //  hMap.clear();
                  
       }
         
        catch (Exception ae)
        {
            System.out.println(ae);
            JOptionPane.showMessageDialog(jd1,"page limit reached");
                        pageno++;
                        jtf1.setText(""+pageno);
         
        }
                   
                   
                }
            }
        }

        catch(Exception e)
        {
			System.out.println(e.getMessage());
                        JOptionPane.showMessageDialog(jd1,"page limit reached");
                        pageno++;
                        jtf1.setText(""+pageno);
        }
            
          jtf1.setText(""+pageno);  
}//GEN-LAST:event_jButton7ActionPerformed

private void jtf1MouseReleased(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_jtf1MouseReleased
// TODO add your handling code here:
    //jtf1.setText("");
}//GEN-LAST:event_jtf1MouseReleased

private void jtf1KeyTyped(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_jtf1KeyTyped
// TODO add your handling code here:
    //jtf1.setText("");
    //if evt.equals(VK_ENTER)
    //        {
    //System.out.print("key typed is: "+jtf1.getk);
    
  /*  pageno=Integer.parseInt(jtf1.getText());
    
   // pageno--;
    int num1=jTable1.getSelectedRow();
    PdfReader pdfr=null; 
        String str3=null,str1=jTable1.getValueAt(num1, 0).toString();
               
            try
        {
            
           
            File dir =  new File(".\\store");
            File[] file =  dir.listFiles();
            String files;
            System.out.println("length : "+file.length);
            for(int i=0;i<file.length;i++)
            {
                files = file[i].getName();
                System.out.println("files are"+files);
                if (files.endsWith(".PDF") || files.endsWith(".pdf"))
                {
                   System.out.println("default"+files);   
                 try
                 {
                  PdfReader ReadInputPDF;
            
                  ReadInputPDF = new PdfReader(".\\store\\"+files);
                  HashMap hMap = new HashMap();
                  hMap=ReadInputPDF.getInfo();
                  Iterator iterator = hMap.keySet().iterator();
                  String athr=null;
                  
                  while (iterator.hasNext())
                  {
                          String key = (String) iterator.next();
                          
                          if(key.equals("Title"))
                          {
                          System.out.println(key + ":" + hMap.get(key));
                          if(hMap.get(key).equals(str1))
                          {
                              try {
        File fil=new File(file[i].toString());        
        pdfr=new PdfReader(fil.toString());
            
                str3=PdfTextExtractor.getTextFromPage(pdfr,pageno);
        }
            catch (IOException ex) {
                Logger.getLogger(shelf.class.getName()).log(Level.SEVERE, null, ex);
            }
            ta.setText(str3);
                          }
                         // ta.append(hMap.get(key)+"\t"+athr+"\n");
                              //  String put = hm.put(hMap.get(key).toString(), athr);
                          }
                          
                          if(key.equals("Author"))
                          {
                          System.out.println(key + ":" + hMap.get(key));
                            // ta.append(hMap.get(key)+"\n");
                          athr=hMap.get(key).toString();
                          }                 
          }
                //  hMap.clear();
                  
       }
         
        catch (Exception ae)
        {
            System.out.println(ae);
         
        }
                   
                   
                }
            }
        }

        catch(Exception e)
        {
			System.out.println(e.getMessage());
        }
            
          jtf1.setText(""+pageno);
    */
       //     }
}//GEN-LAST:event_jtf1KeyTyped

private void jtf1MouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_jtf1MouseClicked
// TODO add your handling code here:
    
}//GEN-LAST:event_jtf1MouseClicked

private void jButton1ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton1ActionPerformed
// TODO add your handling code here:
    pageno=Integer.parseInt(jtf1.getText());
    
    int num1=jTable1.getSelectedRow();
    PdfReader pdfr=null; 
        String str3=null,str1=jTable1.getValueAt(num1, 0).toString();
    
            jd1=new javax.swing.JDialog();
            try
        {
            
           
            File dir =  new File(".\\store");
            File[] file =  dir.listFiles();
            String files;
            System.out.println("length : "+file.length);
            for(int i=0;i<file.length;i++)
            {
                files = file[i].getName();
                System.out.println("files are"+files);
                if (files.endsWith(".PDF") || files.endsWith(".pdf"))
                {
                   System.out.println("default"+files);   
                 try
                 {
                  PdfReader ReadInputPDF;
            
                  ReadInputPDF = new PdfReader(".\\store\\"+files);
                  HashMap hMap = new HashMap();
                  hMap=ReadInputPDF.getInfo();
                  Iterator iterator = hMap.keySet().iterator();
                  String athr=null;
                  
                  while (iterator.hasNext())
                  {
                          String key = (String) iterator.next();
                          
                          if(key.equals("Title"))
                          {
                          System.out.println(key + ":" + hMap.get(key));
                          if(hMap.get(key).equals(str1))
                          {
                              try {
        File fil=new File(file[i].toString());        
        pdfr=new PdfReader(fil.toString());
            
                str3=PdfTextExtractor.getTextFromPage(pdfr,pageno);
        }
            catch (IOException ex) {
                Logger.getLogger(shelf.class.getName()).log(Level.SEVERE, null, ex);
            }
            ta.setText(str3);
                          }
                         // ta.append(hMap.get(key)+"\t"+athr+"\n");
                              //  String put = hm.put(hMap.get(key).toString(), athr);
                          }
                          
                          if(key.equals("Author"))
                          {
                          System.out.println(key + ":" + hMap.get(key));
                            // ta.append(hMap.get(key)+"\n");
                          athr=hMap.get(key).toString();
                          }                 
          }
                //  hMap.clear();
                  
       }
         
        catch (Exception ae)
        {
            System.out.println(ae);
            //System.out.println(e.getMessage());
                        JOptionPane.showMessageDialog(jd1,"page limit reached");
                        pageno--;
                        jtf1.setText(""+pageno);
         
        }
                   
                   
                }
            }
        }

        catch(Exception e)
        {
			System.out.println(e.getMessage());
                        JOptionPane.showMessageDialog(jd1,"page limit reached");
                        pageno--;
                        jtf1.setText(""+pageno);
        }
            
            jtf1.setText(""+pageno);
}//GEN-LAST:event_jButton1ActionPerformed

private void jm1ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jm1ActionPerformed
// TODO add your handling code here:
}//GEN-LAST:event_jm1ActionPerformed

private void jButton3ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton3ActionPerformed
// TODO add your handling code here:
    pageno=1;
    
    int num1=jTable1.getSelectedRow();
    PdfReader pdfr=null; 
        String str3=null,str1=jTable1.getValueAt(num1, 0).toString();
    
            jd1=new javax.swing.JDialog();
            try
        {
            
           
            File dir =  new File(".\\store");
            File[] file =  dir.listFiles();
            String files;
            System.out.println("length : "+file.length);
            for(int i=0;i<file.length;i++)
            {
                files = file[i].getName();
                System.out.println("files are"+files);
                if (files.endsWith(".PDF") || files.endsWith(".pdf"))
                {
                   System.out.println("default"+files);   
                 try
                 {
                  PdfReader ReadInputPDF;
            
                  ReadInputPDF = new PdfReader(".\\store\\"+files);
                  HashMap hMap = new HashMap();
                  hMap=ReadInputPDF.getInfo();
                  Iterator iterator = hMap.keySet().iterator();
                  String athr=null;
                  
                  while (iterator.hasNext())
                  {
                          String key = (String) iterator.next();
                          
                          if(key.equals("Title"))
                          {
                          System.out.println(key + ":" + hMap.get(key));
                          if(hMap.get(key).equals(str1))
                          {
                              try {
        File fil=new File(file[i].toString());        
        pdfr=new PdfReader(fil.toString());
            
                str3=PdfTextExtractor.getTextFromPage(pdfr,pageno);
        }
            catch (IOException ex) {
                Logger.getLogger(shelf.class.getName()).log(Level.SEVERE, null, ex);
            }
            ta.setText(str3);
                          }
                         // ta.append(hMap.get(key)+"\t"+athr+"\n");
                              //  String put = hm.put(hMap.get(key).toString(), athr);
                          }
                          
                          if(key.equals("Author"))
                          {
                          System.out.println(key + ":" + hMap.get(key));
                            // ta.append(hMap.get(key)+"\n");
                          athr=hMap.get(key).toString();
                          }                 
          }
                //  hMap.clear();
                  
       }
         
        catch (Exception ae)
        {
            System.out.println(ae);
            //System.out.println(e.getMessage());
                        JOptionPane.showMessageDialog(jd1,"page limit reached");
                        pageno--;
                        jtf1.setText(""+pageno);
         
        }
                   
                   
                }
            }
        }

        catch(Exception e)
        {
			System.out.println(e.getMessage());
                        JOptionPane.showMessageDialog(jd1,"page limit reached");
                        pageno--;
                        jtf1.setText(""+pageno);
        }
            
            jtf1.setText(""+pageno);
}//GEN-LAST:event_jButton3ActionPerformed

private void jButton2ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton2ActionPerformed
// TODO add your handling code here:
    
    
    
    int num1=jTable1.getSelectedRow();
    PdfReader pdfr=null; 
        String str3=null,str1=jTable1.getValueAt(num1, 0).toString();
    
            jd1=new javax.swing.JDialog();
            try
        {
            
           
            File dir =  new File(".\\store");
            File[] file =  dir.listFiles();
            String files;
            System.out.println("length : "+file.length);
            for(int i=0;i<file.length;i++)
            {
                files = file[i].getName();
                System.out.println("files are"+files);
                if (files.endsWith(".PDF") || files.endsWith(".pdf"))
                {
                   System.out.println("default"+files);   
                 try
                 {
                  PdfReader ReadInputPDF;
            
                  ReadInputPDF = new PdfReader(".\\store\\"+files);
                  HashMap hMap = new HashMap();
                  hMap=ReadInputPDF.getInfo();
                  Iterator iterator = hMap.keySet().iterator();
                  String athr=null;
                  
                  while (iterator.hasNext())
                  {
                          String key = (String) iterator.next();
                          
                          if(key.equals("Title"))
                          {
                          System.out.println(key + ":" + hMap.get(key));
                          if(hMap.get(key).equals(str1))
                          {
                              try {
        File fil=new File(file[i].toString());        
        pdfr=new PdfReader(fil.toString());
            pageno=pdfr.getNumberOfPages();
                str3=PdfTextExtractor.getTextFromPage(pdfr,pageno);
        }
            catch (IOException ex) {
                Logger.getLogger(shelf.class.getName()).log(Level.SEVERE, null, ex);
            }
            ta.setText(str3);
                          }
                         // ta.append(hMap.get(key)+"\t"+athr+"\n");
                              //  String put = hm.put(hMap.get(key).toString(), athr);
                          }
                          
                          if(key.equals("Author"))
                          {
                          System.out.println(key + ":" + hMap.get(key));
                            // ta.append(hMap.get(key)+"\n");
                          athr=hMap.get(key).toString();
                          }                 
          }
                //  hMap.clear();
                  
       }
         
        catch (Exception ae)
        {
            System.out.println(ae);
            //System.out.println(e.getMessage());
                        JOptionPane.showMessageDialog(jd1,"page limit reached");
                        pageno--;
                        jtf1.setText(""+pageno);
         
        }
                   
                   
                }
            }
        }

        catch(Exception e)
        {
			System.out.println(e.getMessage());
                        JOptionPane.showMessageDialog(jd1,"page limit reached");
                        pageno--;
                        jtf1.setText(""+pageno);
        }
            
            jtf1.setText(""+pageno);
            
}//GEN-LAST:event_jButton2ActionPerformed

private void jTable2MouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_jTable2MouseClicked
// TODO add your handling code here:
    //jTable1.setFocusable(false);
    jtf1.setText("1");
    pageno=1;
    int num1=jTable2.getSelectedRow();
    int num2=jTable2.getSelectedColumn();
    PdfReader pdfr=null; 
        String str3=null,str1=jTable2.getValueAt(num1,num2).toString();
    //System.out.println(num1);
  /*  System.out.println("tableee nameee"+jTable1.getValueAt(num1, 0));
    try {
        File fil=new File(".//store//"+jTable1.getValueAt(num1, 0).toString());        
        pdfr=new PdfReader(fil.toString());
            
                str3=PdfTextExtractor.getTextFromPage(pdfr, 22);
        }
            catch (IOException ex) {
                Logger.getLogger(shelf.class.getName()).log(Level.SEVERE, null, ex);
            }
            ta.setText(str3);
            
    */        
            
            try
        {
            
           
            File dir =  new File(".\\store");
            File[] file =  dir.listFiles();
            String files;
            System.out.println("length : "+file.length);
            for(int i=0;i<file.length;i++)
            {
                files = file[i].getName();
                System.out.println("files are"+files);
                if (files.endsWith(".PDF") || files.endsWith(".pdf"))
                {
                   System.out.println("default"+files);   
                 try
                 {
                  PdfReader ReadInputPDF;
            
                  ReadInputPDF = new PdfReader(".\\store\\"+files);
                  HashMap hMap = new HashMap();
                  hMap=ReadInputPDF.getInfo();
                  Iterator iterator = hMap.keySet().iterator();
                  String athr=null;
                  
                  while (iterator.hasNext())
                  {
                          String key = (String) iterator.next();
                          
                          if(key.equals("Title"))
                          {
                          System.out.println(key + ":" + hMap.get(key));
                          if(hMap.get(key).equals(str1))
                          {
                              try {
        File fil=new File(file[i].toString());        
        pdfr=new PdfReader(fil.toString());
            
                str3=PdfTextExtractor.getTextFromPage(pdfr,1);
        }
            catch (IOException ex) {
                Logger.getLogger(shelf.class.getName()).log(Level.SEVERE, null, ex);
            }
            ta.setText(str3);
                          }
                         // ta.append(hMap.get(key)+"\t"+athr+"\n");
                              //  String put = hm.put(hMap.get(key).toString(), athr);
                          }
                          
                          if(key.equals("Author"))
                          {
                          System.out.println(key + ":" + hMap.get(key));
                            // ta.append(hMap.get(key)+"\n");
                          athr=hMap.get(key).toString();
                          }                 
          }
                //  hMap.clear();
                  
       }
         
        catch (Exception ae)
        {
            System.out.println(ae);
         
        }
                   
                   
                }
            }
        }

        catch(Exception e)
        {
			System.out.println(e.getMessage());
        }
            
}//GEN-LAST:event_jTable2MouseClicked

class reader
{
    public void readBook()
    {
        ta.setText("");
    JFileChooser fc1 = new JFileChooser(".\\store");
   // fc.setDialogTitle("Choose a file");    
    fc1.setVisible(true);
    int retval1=fc1.showOpenDialog(null);
    if (retval1 == JFileChooser.APPROVE_OPTION) {
        String str1=fc1.getSelectedFile().getAbsolutePath();
        ta.setText(str1);
        File fil2=fc1.getSelectedFile();
        PdfReader pdfr=null; 
        String str3=null;
        try {
                pdfr=new PdfReader(fil2.toString());
            
                str3=PdfTextExtractor.getTextFromPage(pdfr,70);
        }
            catch (IOException ex) {
                Logger.getLogger(shelf.class.getName()).log(Level.SEVERE, null, ex);
            }
            ta.setText(str3);
    }
    }
    
}

class bookshelf
{
    public void addBook()
    {
        jd2=new javax.swing.JDialog();
        ta.setText("");
    JFileChooser fc = new JFileChooser();
   // fc.setDialogTitle("Choose a file");    
    fc.setVisible(true);
    int retval=fc.showOpenDialog(null);
    
    if (retval == JFileChooser.APPROVE_OPTION) {
        String str=fc.getSelectedFile().getName();
        File sourceFile= fc.getSelectedFile();
        File destFile= new File(".\\store\\"+str);
        if (!sourceFile.exists())
        {
                return;
        }
        
        if (!destFile.exists())
        {
                try {
                    destFile.createNewFile();
                   // ta.setText("Book added successfully");
                    JOptionPane.showMessageDialog(jd2,"Book added succesfully");
                } catch (IOException ex) {
                    Logger.getLogger(shelf.class.getName()).log(Level.SEVERE, null, ex);
                }
        }
        else
        {
            System.out.println("File already exist\n");
            //ta.setText("File already exists\n");
            JOptionPane.showMessageDialog(jd2,"File already exists");
        }
        
        FileChannel source = null;
        FileChannel destination = null;
            try {
                source = new FileInputStream(sourceFile).getChannel();
            } catch (FileNotFoundException ex) {
                Logger.getLogger(shelf.class.getName()).log(Level.SEVERE, null, ex);
            }
            try {
                destination = new FileOutputStream(destFile).getChannel();
            } catch (FileNotFoundException ex) {
                Logger.getLogger(shelf.class.getName()).log(Level.SEVERE, null, ex);
            }
        
        if (destination != null && source != null)
        {
                try {
                    destination.transferFrom(source, 0, source.size());
                } catch (IOException ex) {
                    Logger.getLogger(shelf.class.getName()).log(Level.SEVERE, null, ex);
                }
        }
        
        if (source != null)
        {
                try {
                    source.close();
                } catch (IOException ex) {
                    Logger.getLogger(shelf.class.getName()).log(Level.SEVERE, null, ex);
                }
        }
        
        if (destination != null)
        {
                try {
                    destination.close();
                } catch (IOException ex) {
                    Logger.getLogger(shelf.class.getName()).log(Level.SEVERE, null, ex);
                }
        }
        try {
            String athr=null;
          PdfReader ReadInputPDF;
          ReadInputPDF = new PdfReader(".\\store\\"+str);
          HashMap hMap = new HashMap();
          hMap=ReadInputPDF.getInfo();
          Iterator iterator = hMap.keySet().iterator();
          while (iterator.hasNext()) {
                  String key = (String) iterator.next();
                  if(key.equals("Title"))
                          {
                          System.out.println(key + ":" + hMap.get(key));
                          //ta.append(hMap.get(key)+"\t"+athr+"\n");
                           hm.put(hMap.get(key).toString(), athr);
                          // noofrows++;
                           jTable1.setValueAt(hMap.get(key), noofrows, columnno);
                           columnno++;
                           jTable1.setValueAt(athr, noofrows, columnno);
                           noofrows++;
                           columnno=0;
                          }
                          
                          if(key.equals("Author"))
                          {
                          System.out.println(key + ":" + hMap.get(key));
                            // ta.append(hMap.get(key)+"\n");
                          athr=hMap.get(key).toString();
                          }                 
          }
          ObjectOutputStream obj = new ObjectOutputStream(new FileOutputStream(".\\store\\db.txt"));
                  obj.writeObject(hm);
                    obj.close();
                System.out.println("written into db");
          }
         
        catch (Exception i)
        {
            System.out.println(i);
        }
        
    }
    
    }
    
    
    public void delBook()
    {
        ta.setText("");
  String title=null;
  String str1=null;
    JFileChooser fc1 = new JFileChooser(".\\store");
   // fc.setDialogTitle("Choose a file");    
    fc1.setVisible(true);
    int retval1=fc1.showOpenDialog(null);
    if (retval1 == JFileChooser.APPROVE_OPTION) {
        str1=fc1.getSelectedFile().getName();
        ta.setText(str1);
        File fil1=fc1.getSelectedFile();
       //=====================================
        try {
                System.out.println("str1 is :"+str1);
            String athr=null;            
          PdfReader ReadInputPDF;
          ReadInputPDF = new PdfReader(".\\store\\"+str1);
          HashMap hMap = new HashMap();
          hMap=ReadInputPDF.getInfo();
          System.out.println("---------------");
          System.out.println(hMap);
          System.out.println("-----------------");
          Iterator iterator = hMap.keySet().iterator();
          while (iterator.hasNext()) {
                  String key = (String) iterator.next();
                  if(key.equals("Title"))
                          {
                          System.out.println(key + ":" + hMap.get(key));
                          //ta.append(hMap.get(key)+"\t"+athr+"\n");
                          title=hMap.get(key).toString();
                          System.out.println("titttttllllleeeeee: "+title);
                         //  hm.put(hm.get(key).toString(), athr);
                          }
                          
                          if(key.equals("Author"))
                          {
                          System.out.println(key + ":" + hMap.get(key));
                            // ta.append(hMap.get(key)+"\n");
                          athr=hMap.get(key).toString();
                          System.out.println("authorrrrrrr: "+athr);
                          }                 
          }
          
          }         
        catch (Exception i)
        {
            System.out.println(i);
        }
            System.out.println("titleeeeeeee : "+title);
            System.out.println("delete from the HashMap");        
        Iterator iterator = hm.keySet().iterator();
       String st=null;
        while(iterator. hasNext()){        
            //System.out.println(iterator.next());
            //System.out.println();
            st=iterator.next().toString();
            System.out.append("**** "+str1+" ****");
            if(st.equals(title))
            {
                hm.remove(st);
                System.out.println("equalssssssssssssssssssss");
            }
           // ta.append(st+"\t\t\t"+hm.get(st)+"\n");
           // ta.append();
         //   ta.append(hm.get(st));            
               
        }
         try
            {
            ObjectOutputStream obj = new ObjectOutputStream(new FileOutputStream(".\\store\\db.txt"));
                  obj.writeObject(hm);
                    obj.close();
                System.out.println("written into db");
            }
            catch(Exception ae)
            {
           // ae.printStackTrace();
            }
         //=================================
        
        boolean success= fil1.delete();
        if(!success)
        {
            System.out.println("del failed");
           // ta.setText("deletion failed");
            JOptionPane.showMessageDialog(jd2,"Deletion Failed");
        }
        else
        {            
            
        System.out.print("del success");
           // ta.setText("deletion succesful");
        JOptionPane.showMessageDialog(jd2,"Deletion Succesful");
        }
    }
    }
}

class book
{
    public void table()
    {
         System.out.println("insesrting all keys into table from the HashMap");        
        Iterator iterator = hm.keySet().iterator();
       String st=null;
       int cou1=0,cou2=0;
   // jTable1.setValueAt("hii", 1, 1);
       for(int i=0;i<14;i++)
       {
           jTable2.setValueAt("",i,0);
           jTable2.setValueAt("",i,1);
           jTable2.setValueAt("",i,2);
           
       }
       for(int i=0;i<noofrows;i++)
       {
           jTable1.setValueAt("",i,0);
           jTable1.setValueAt("",i,1);
       }
        while(iterator. hasNext()){        
            //System.out.println(iterator.next());
            //System.out.println();
            st=iterator.next().toString();
           // ta.append(st+"\t\t\t"+hm.get(st)+"\n");
           // jTable1.setValueAt("",cou1,cou2);
            jTable1.setValueAt(st, cou1, cou2);
            cou2++;
            jTable1.setValueAt(hm.get(st), cou1, cou2);
            cou1++;
            cou2=0;
        }
        noofrows=cou1;
    }
}
    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(shelf.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(shelf.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(shelf.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(shelf.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {

            @Override
            public void run() {
                new shelf().setVisible(true);
            }
        });
    }
    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JMenuItem addbook;
    private javax.swing.JMenuItem delbook;
    private javax.swing.JMenuItem exit;
    private javax.swing.JMenuItem gridmi;
    private javax.swing.JButton jButton1;
    private javax.swing.JButton jButton2;
    private javax.swing.JButton jButton3;
    private javax.swing.JButton jButton6;
    private javax.swing.JButton jButton7;
    private javax.swing.JButton jButton8;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JScrollPane jScrollPane2;
    private javax.swing.JScrollPane jScrollPane3;
    private javax.swing.JTable jTable1;
    private javax.swing.JTable jTable2;
    private javax.swing.JMenu jm1;
    private javax.swing.JMenu jm2;
    private javax.swing.JMenuBar jmb1;
    private javax.swing.JTextField jtf;
    private javax.swing.JTextField jtf1;
    private javax.swing.JMenuItem listmi;
    private javax.swing.JMenuItem open;
    private javax.swing.JTextArea ta;
    // End of variables declaration//GEN-END:variables
    public javax.swing.JDialog jd1;
    public javax.swing.JDialog jd2;
}
